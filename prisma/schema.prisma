// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  ADMIN_ROLE
  USER_ROLE
  ADVISER_ROLE
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
  EXPIRED
}

model Country {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  image    String
  isActive Boolean @default(true)
  states   State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  image     String
  isActive  Boolean @default(true)
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
}

model City {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  image        String
  isActive     Boolean       @default(true)
  stateId      Int
  state        State         @relation(fields: [stateId], references: [id])
  headquarters Headquarter[]
  users        User[]
}

model Headquarter {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  address     String
  phoneNumber String
  email       String
  isActive    Boolean          @default(true)
  cityId      Int
  city        City             @relation(fields: [cityId], references: [id])
  medicines   Medicine_Stock[] @relation("HeadquarterToMedicine")
  modules     Module[]
  tickets     Ticket[]
}

model Medicine_Stock {
  id              Int           @id @default(autoincrement())
  name            String
  image           String
  quantity        Int
  manufacturer    String
  unitOfMeasure   String
  quantityPerUnit Int
  isActive        Boolean       @default(true)
  headquarters    Headquarter[] @relation("HeadquarterToMedicine")
  tickets         Ticket[]      @relation("TicketMedicine")
}

model User {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  photo          String?
  userType       Role     @default(USER_ROLE)
  email          String   @unique
  emailValidated Boolean  @default(false)
  password       String
  isActive       Boolean  @default(true)
  cityId         Int
  city           City     @relation(fields: [cityId], references: [id])
  pqrs           PQR[]
  tickets        Ticket[]
}

model PQR {
  id          Int    @id @default(autoincrement())
  code        String
  description String
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
}

model Module {
  id            Int         @id @default(autoincrement())
  name          String
  isActive      Boolean     @default(true)
  headquarterId Int
  headquarter   Headquarter @relation(fields: [headquarterId], references: [id])
  tickets       Ticket[]
}

model Ticket {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  ticketType    TicketStatus @default(PENDING)
  orderDate     DateTime     @default(now())
  serviceData   DateTime?
  priority      Boolean      @default(false)
  headquarterId Int
  userId        Int
  moduleId      Int?

  headquarter Headquarter @relation(fields: [headquarterId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  module      Module?     @relation(fields: [moduleId], references: [id])

  medicines Medicine_Stock[] @relation("TicketMedicine")
  rating    Rating?
}

model Rating {
  id          Int     @id @unique @default(autoincrement())
  value       Int
  description String?
  ticketId    Int     @unique
  ticket      Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketDemo {
  id             String    @id @default(uuid())
  number         Int
  createdAt      DateTime  @default(now())
  handleAtModule String?
  handleAt       DateTime?
  done           Boolean
}
